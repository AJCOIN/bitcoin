all: $(LIBBITCOIND)

leveldb_obj = \
	$(patsubst %test.o,,\
	$(patsubst %bench.o,,\
	$(subst leveldb/db/leveldb_main.o,,\
	$(subst leveldb/util/testharness.o,,\
	$(subst leveldb/util/testutil.o,,\
	$(subst leveldb/port/port_win.o,,\
		$(subst .cc,.o,$(wildcard leveldb/**/*.cc)) \
		$(subst .cc,.o,$(wildcard leveldb/helpers/memenv/memenv.cc)) \
	))))))

libbitcoind_obj = \
	$(subst bitcoin-main.o,, \
		$(subst bitcoin-cli.o,, \
		$(subst bitcoin-tx.o,, \
		$(subst .cpp,.o,$(wildcard *.cpp))))) \
	$(subst compat/glibcxx_compat.o,, \
		$(subst compat/glibc_compat.o,, \
		$(subst .cpp,.o,$(wildcard compat/*.cpp)))) \
	$(subst .cpp,.o,$(wildcard crypto/*.cpp)) \
	$(subst .cpp,.o,$(wildcard script/*.cpp)) \
	$(subst .cpp,.o,$(wildcard secp256k1/*.cpp)) \
	$(subst univalue/gen.o,, \
		$(subst .cpp,.o,$(wildcard univalue/*.cpp)))

if GLIBC_BACK_COMPAT
libbitcoind_obj += compat/glibc_compat.o
libbitcoind_obj += compat/glibcxx_compat.o
endif

version.o: version.cpp obj/build.h
	$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	  $(BITCOIN_INCLUDES) $(BITCOIN_CONFIG_INCLUDES) $(AM_CPPFLAGS) \
	  $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c $< -o $@

$(LIBBITCOIND): $(LIBLEVELDB) $(LIBMEMENV) $(libbitcoind_obj)
	$(CC) -shared $(CXXFLAGS) $(CPPFLAGS) $(DEFS) $(LEVELDB_CPPFLAGS) \
	$(BITCOIN_INCLUDES) $(BITCOIN_CONFIG_INCLUDES) -o $@ $(BOOST_LIBS) \
	$(BDB_LIBS) $(PROTOBUF_LIBS) $(SSL_LIBS) $(LIBS) \
	$(leveldb_obj) $(libbitcoind_obj)
